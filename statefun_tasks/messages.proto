syntax = "proto3";

import "google/protobuf/any.proto";

package statefun_tasks;

message NoneValue {
}

message Address {
    string namespace = 1;
    string type = 2;
    string id = 3;
}

message MapOfStringToAny {
    map <string, google.protobuf.Any> items = 1;
}

message ArrayOfAny {
    repeated google.protobuf.Any items = 1;
}

message TupleOfAny {
    repeated google.protobuf.Any items = 1;
}

message TaskEntry {
    string task_id = 1;
    string task_type = 2;
    google.protobuf.Any request = 3;
    bool complete = 4;
    bool is_finally = 5;
    string namespace = 6;
    string worker_name = 7;
    bool is_fruitful = 8;
    TaskRetryPolicy retry_policy = 9;
    optional string display_name = 10;
    bool is_wait = 11;
    string uid = 12;
    bool is_exceptionally = 13;
}

message GroupEntry {
    string group_id = 1;
    repeated Pipeline group = 2;
    int32 max_parallelism = 3;
    bool is_wait = 4;
    bool return_exceptions = 5;
}

message PipelineEntry {
    oneof entry {
        TaskEntry task_entry = 1;
        GroupEntry group_entry = 2;
    }
}

message Pipeline {
    repeated PipelineEntry entries = 1;

    // whether to inline this pipeline - i.e. pass arguments from and share state with the parent task
    // or treat as independent - defaults to false
    bool inline = 2;

    // parameters to pass to the initial tasks in this pipeline
    optional google.protobuf.Any initial_args = 3;
    optional MapOfStringToAny initial_kwargs = 4;
    optional google.protobuf.Any initial_state = 5;
}

message TaskRetryPolicy {
    repeated string retry_for = 1;
    int32 max_retries = 2;
    float delay_ms = 3;
    bool exponential_back_off = 4;
}

message ArgsAndKwargs {
    TupleOfAny args = 1;
    MapOfStringToAny kwargs = 2;
}

message TaskRequest {
    string id = 1;
    string type = 2;
    oneof reply {
        string reply_topic = 3;
        Address reply_address = 4;
    }
    google.protobuf.Any request = 5;
    google.protobuf.Any state = 6;
    TaskRetryPolicy retry_policy = 7;
    map<string, string> meta = 8;
    optional bool is_fruitful = 9;
    optional string invocation_id = 10;
    string uid = 11;
}

message TaskResult {
    string id = 1;
    string type = 2;
    google.protobuf.Any result = 3;
    google.protobuf.Any state = 4;
    optional string invocation_id = 5;
    string uid = 6;
    bool is_wait = 11;
}

message TaskException {
    string id = 1;
    string type = 2;
    string exception_type = 3;
    string exception_message = 4;
    string stacktrace = 5;
    google.protobuf.Any state = 6;
    bool maybe_retry = 7;
    TaskRetryPolicy retry_policy = 8;
    optional string invocation_id = 9;
    string uid = 10;
    bool is_wait = 11;
}

message TaskResultOrException {
    oneof task_result_or_exception {
        TaskResult task_result = 1;
        TaskException task_exception = 2;
    }
}

message TaskSpecificState {
    int32 retry_count = 1;
    string original_caller_address = 2;
    string original_caller_id = 3;
}

message TaskState {
    map<string, TaskSpecificState> by_uid = 1;
    optional google.protobuf.Any internal_state = 2;
}

message PausedTask {
    string destination = 1;
    TaskRequest task_request = 2;
}

message ChildPipeline {
    string id = 1;
    string address = 2;
    string root_id = 3;
    string root_address = 4;
    string caller_id = 5;
    string caller_address = 6;
    repeated TaskInfo tasks = 7;
    string invocation_id = 8;
}

message TaskInfo {
    string task_id = 1;
    string task_type = 2;
    string namespace = 3;
    string worker_name = 4;
    string task_uid = 5;
    string display_name = 6;
}

enum TaskAction {
    GET_STATUS = 0;
    GET_REQUEST = 1;
    GET_RESULT = 2;
    PAUSE_PIPELINE = 3;
    UNPAUSE_PIPELINE = 4;
    CANCEL_PIPELINE = 5;
}

message TaskActionRequest {
    string id = 1;
    oneof reply {
        string reply_topic = 2;
        Address reply_address = 3;
    }
    TaskAction action = 4;
    string uid = 5;
}

message TaskActionResult {
    string id = 1;
    TaskAction action = 2;
    google.protobuf.Any result = 3;
    string uid = 4;
}

message TaskActionException {
    string id = 1;
    TaskAction action = 2;
    string exception_type = 3;
    string exception_message = 4;
    string stacktrace = 5;
    string uid = 6;
}

message TaskStatus {
    enum Status {
        PENDING = 0;
        RUNNING = 1;
        COMPLETED = 2;
        FAILED = 3;
        PAUSED = 4;
        CANCELLING = 5;
        CANCELLED = 6;
    }
    Status value = 1;
}

message GroupInfo {
    string group_id = 1;
    repeated PipelineInfo group = 2;
}

message EntryInfo {
    oneof entry {
        TaskInfo task_entry = 1;
        GroupInfo group_entry = 2;
    }
}

message PipelineInfo {
    repeated EntryInfo entries = 1;
}

message PipelineCreated {
    string caller_id = 1;
    string caller_address = 2;
    PipelineInfo pipeline = 3;
}

message PipelineStatusChanged {
    TaskStatus status = 1;
}

message PipelineTasksSkipped {
    repeated TaskInfo tasks = 1;
}

message Event {
    string pipeline_id = 1;
    string pipeline_address = 2;
    string root_pipeline_id = 3;
    string root_pipeline_address = 4;

    oneof event {
        PipelineCreated pipeline_created = 5;
        PipelineStatusChanged pipeline_status_changed = 6;
        PipelineTasksSkipped pipeline_tasks_skipped = 7;
    }
}
